# 最下面有索引
####################################
"""
# 一行代码实现1-100的和
 # 利用sum求和
print(sum(range(1, 101)))
"""
####################################
'''
# 如何在一个函数内部修改全局变量
 # 利用global修改全局变量
a = 5
def fun():
    global a
    a = 4

fun()
print(a)
'''
####################################
"""
# 列出5个python的标准库
os: 提供了不少与操作系统相关联的函数
sys: 通常用于命令行参数
re: 正则匹配
math: 数学运算
datetime: 处理时间日期
"""
####################################
'''
# 字典删除键和合并两个字典
 # del和update方法
dic = {"name": "1", "age": "2"}
del dic["name"]
print(dic)

dic2 = {'height': "170"}
dic.update(dic2)
print(dic)
'''
####################################
"""
# 谈下python的GIL
GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，
一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），
使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。
如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。
所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。

多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，
所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大
"""
####################################
'''
# python实现列表去重的方法
 # 先通过集合去重，再转列表
'''
####################################
"""
# fun(*args, **kwargs)中的*args, **kwargs什么意思？
*args, **kwargs主要用于函数定义。你可以将不定数量的参数传递给一个函数。
这里的不定的意思是：预先不知道，函数使用者会传递多少个参数给你，所以在
这个场景下使用这两个关键字。
*args是用来发送一个非键值对的可变数量的参数列表给一个函数。 
例：

def demo(args_f, *args_v):
    print(args_f)
    for x in args_v:
        print(x)
print(demo('a','b','c','d'))

**kwargs允许你将不定长度的键值对，作为参数传递给一个函数。
如果你想要在一个函数里处理带名字的参数，应该用**kwargs
例：
def demo(**args_v):
    for k,v in args_v.items():
            print(k, v)
print(demo(name='nice'))
"""
####################################
'''
# Python2和Python3的区别

python2中是print语句， python3中变为print()函数。

python3中源码文件默认使用utf-8编码，所以python3对中文的支持很友好

python2中有两种不等运算符为 != 和 <> ，以及两种打开文件方式file(...)和open(...)
在python3中不等符只有 != ，打开文件只有open(...)

python2中使用range()函数返回的是列表，而python3中返回的是迭代器。

python中3个高级函数map, filter, reduce.
在python2中 map, filter 类型是built-in funtion(内置函数)，输出为列表。
在python3中 map, filter 类型从函数变成了类，输出变为可迭代对象。
而reduce函数在python3中被挪到了functools模块当中
 # 说明一下reduce, 此函数需要一个function参数，一个可迭代对象iterable
 # 先用function 函数对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用
 # function 函数进行操作,以此类推，进行累积，最终得到结果。
'''
####################################
# 解释什么样的语言能够使用装饰器
 # 函数可以作为参数传递的语言，可以使用装饰器
####################################
# 简述面向对象中__new__和__init__的区别
"""
__init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数
1、__new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别

2、__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类（通过super(当前类名, cls)）__new__出来的实例，或者直接是object的__new__出来的实例

3、__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值

4、如果__new__创建的是当前类的实例，会自动调用__init__函数，通过return语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名，；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数
"""
####################################
# 简述with方法打开处理文件帮我们做了什么？
'''
文件打开可能会有异常，按照正常打开方式f.open写法。我们需要try,except,finally
做异常判断，不管遇到什么情况，最后都会执行finally f.close()关闭文件，with方法
帮我们做了 finally中 f.close
'''
####################################
# 列表[1,2,3,4,5],使用map()函数输出[1,4,9,16,25],然后取出大于10数。
"""
list = [1, 2, 3, 4, 5]
def fun(x):
    return x ** 2

lt = map(fun, list)
ret = [i for i in lt if i > 10]
print(ret)
"""
####################################
# python中生成随机整数、随机小数、0--1之间小数方法
'''
import random
import numpy as np
# ret = random.randint(0, 10)
ret = np.random.rand(5)  # 生成5个随机小数 
# ret = random.random()
print(ret)
'''
####################################
# 消除student表中name字段的重复，写sql语句
# select distinct name from student
####################################
# 10个linux常用命令
# ls pwd cd touch rm mkdir tree cp mv cat more grep echo
####################################
# 列出python中可变数据类型和不可变数据类型，并简述原理
"""
不可变数据类型： 数值型，字符串型string和元组tuple
不允许变量发生变化，相当于新建了一个对象。而对于相同值的对象，内存中只有一个地址。

可变数据类型：列表list和字典dict
对允许变量的值做append, +=操作时，只是改变了变量的值，不会新建对象，
地址也不会发生改变。而相同值的不同对象，它们都有自己的地址。
"""
####################################
# 对一个字符串去重
'''
a = 'fdkfdkewihshksfjldskjxnvm'
a_1 = ""
for i in a:
    if i not in a_1:
        a_1 += i
print(a_1)
'''
####################################
# 用lambda函数实现两个数相乘
"""
fun = lambda a, b: a * b
print(fun(3, 7))
"""
####################################
# 统计字符串中每个字母出现的次数
'''
a = 'ahfyasfetyfjhjtmnsgdhgshdgannfguydhag'
from collections import Counter
ret = Counter(a)
print(ret)
'''
####################################
# 找出列表的所有奇数，并构造新的列表

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
"""
def fn(a):
    return a%2 == 1
newlist = filter(fn, a)
newlist = [i for i in newlist]
print(newlist)
"""
'''
ret = [i for i in a if i % 2 == 1]
print(ret)
'''
####################################




####################################
# 索引
"""
04- 一行代码实现1-100的和
10- 如何在一个函数内部修改全局变量
22- 列出5个python的标准库
31- 字典删除键和合并两个字典
43- 谈下python的GIL
55- python实现列表去重的方法
60- fun(*args, **kwargs)中的*args, **kwargs什么意思？
83- Python2和Python3的区别
103- 解释什么样的语言能够使用装饰器
106- 简述面向对象中__new__和__init__的区别
118- 简述with方法打开处理文件帮我们做了什么？
125- 列表[1,2,3,4,5],使用map()函数输出[1,4,9,16,25],然后取出大于10数。
136- python中生成随机整数、随机小数、0--1之间小数方法
146- 消除student表中name字段的重复，写sql语句  #
149- 10个linux常用命令  #
152- 列出python中可变数据类型和不可变数据类型，并简述原理
162- 对一个字符串去重     !!
178- 统计字符串中每个字母出现的次数   Counter
186- 找出列表的所有奇数，并构造新的列表   filter  and  列表推倒式
"""
####################################